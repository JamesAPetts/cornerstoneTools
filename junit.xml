<testsuites name="jest tests" tests="304" failures="0" time="25.478">
  <testsuite name="renderSegmentationOutline.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:26" time="15.983" tests="11">
    <testcase classname="renderSegmentationOutline.js Initialization should have a test image of 256 x 256 pixels." name="renderSegmentationOutline.js Initialization should have a test image of 256 x 256 pixels." time="0.002">
    </testcase>
    <testcase classname="renderSegmentationOutline.js Initialization should map point 100,100 in image to 100,100 on canvas." name="renderSegmentationOutline.js Initialization should map point 100,100 in image to 100,100 on canvas." time="0.001">
    </testcase>
    <testcase classname="renderSegmentationOutline.js Initialization should map point 0,0 in image to 256,0 on canvas." name="renderSegmentationOutline.js Initialization should map point 0,0 in image to 256,0 on canvas." time="0.001">
    </testcase>
    <testcase classname="renderSegmentationOutline.js getOutline Should produce two segment outlines with 9 and 24 lines." name="renderSegmentationOutline.js getOutline Should produce two segment outlines with 9 and 24 lines." time="0.014">
    </testcase>
    <testcase classname="renderSegmentationOutline.js getOutline Should correctly scale the line segments to the canvas size whilst keeping thickness the same on canvas" name="renderSegmentationOutline.js getOutline Should correctly scale the line segments to the canvas size whilst keeping thickness the same on canvas" time="0.017">
    </testcase>
    <testcase classname="renderSegmentationOutline.js getOutline Should correctly change the line thickness to 3 pixels, regardless of the canvas scale factor" name="renderSegmentationOutline.js getOutline Should correctly change the line thickness to 3 pixels, regardless of the canvas scale factor" time="0.013">
    </testcase>
    <testcase classname="renderSegmentationOutline.js getOutline Should correctly rotate the line segments to the canvas (90 degrees)" name="renderSegmentationOutline.js getOutline Should correctly rotate the line segments to the canvas (90 degrees)" time="0.017">
    </testcase>
    <testcase classname="renderSegmentationOutline.js getOutline Should correctly horizontally flip the line segments to the canvas" name="renderSegmentationOutline.js getOutline Should correctly horizontally flip the line segments to the canvas" time="0.014">
    </testcase>
    <testcase classname="renderSegmentationOutline.js getOutline Should correctly vertically flip the line segments to the canvas" name="renderSegmentationOutline.js getOutline Should correctly vertically flip the line segments to the canvas" time="0.001">
    </testcase>
    <testcase classname="renderSegmentationOutline.js getOutline Should correctly translate the line segments with the canvas" name="renderSegmentationOutline.js getOutline Should correctly translate the line segments with the canvas" time="0.002">
    </testcase>
    <testcase classname="renderSegmentationOutline.js renderOutline Should call drawLines twice" name="renderSegmentationOutline.js renderOutline Should call drawLines twice" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FreehandRoiTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:42" time="0.597" tests="19">
    <testcase classname="FreehandRoiTool.js default values has a default name of &quot;FreehandRoi&quot;" name="FreehandRoiTool.js default values has a default name of &quot;FreehandRoi&quot;" time="0.002">
    </testcase>
    <testcase classname="FreehandRoiTool.js default values can be created with a custom tool name" name="FreehandRoiTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="FreehandRoiTool.js createNewMeasurement emits console error if required eventData is not provided" name="FreehandRoiTool.js createNewMeasurement emits console error if required eventData is not provided" time="0">
    </testcase>
    <testcase classname="FreehandRoiTool.js createNewMeasurement returns a tool measurement object" name="FreehandRoiTool.js createNewMeasurement returns a tool measurement object" time="0.001">
    </testcase>
    <testcase classname="freehandIntersect.js should return true if a new handle crosses any previous line" name="freehandIntersect.js should return true if a new handle crosses any previous line" time="0">
    </testcase>
    <testcase classname="freehandIntersect.js should return false if a new handle doesn&apos;t cross any previous line" name="freehandIntersect.js should return false if a new handle doesn&apos;t cross any previous line" time="0.001">
    </testcase>
    <testcase classname="freehandIntersect.js should return true if the line created by finishing the polygon crosses any previous line" name="freehandIntersect.js should return true if the line created by finishing the polygon crosses any previous line" time="0">
    </testcase>
    <testcase classname="freehandIntersect.js should return false if the line created by finishing the polygon doesn&apos;t cross any previous line" name="freehandIntersect.js should return false if the line created by finishing the polygon doesn&apos;t cross any previous line" time="0">
    </testcase>
    <testcase classname="freehandIntersect.js should return true if one moves a polygon&apos;s vertex such that it causes an lines to cross" name="freehandIntersect.js should return true if one moves a polygon&apos;s vertex such that it causes an lines to cross" time="0.001">
    </testcase>
    <testcase classname="freehandIntersect.js should return false if one moves a polygon&apos;s vertex a bit such that no lines cross" name="freehandIntersect.js should return false if one moves a polygon&apos;s vertex a bit such that no lines cross" time="0">
    </testcase>
    <testcase classname="pointInFreehand.js should return true if the point is inside the polygon" name="pointInFreehand.js should return true if the point is inside the polygon" time="0.001">
    </testcase>
    <testcase classname="pointInFreehand.js should return false if the point is outside the object, to the right" name="pointInFreehand.js should return false if the point is outside the object, to the right" time="0">
    </testcase>
    <testcase classname="pointInFreehand.js should return false if the point is outside the object, to the left" name="pointInFreehand.js should return false if the point is outside the object, to the left" time="0">
    </testcase>
    <testcase classname="pointInFreehand.js should return false if on the line exactly" name="pointInFreehand.js should return false if on the line exactly" time="0.001">
    </testcase>
    <testcase classname="pointInFreehand.js should return false if the point is outside the object, above or bellow" name="pointInFreehand.js should return false if the point is outside the object, above or bellow" time="0.001">
    </testcase>
    <testcase classname="freehandArea.js should return the area enclosed in dataHandles" name="freehandArea.js should return the area enclosed in dataHandles" time="0">
    </testcase>
    <testcase classname="freehandArea.js should scale if a scale parameter is given." name="freehandArea.js should scale if a scale parameter is given." time="0">
    </testcase>
    <testcase classname="calculateFreehandStatistics.js should not include pixels outside the polygon" name="calculateFreehandStatistics.js should not include pixels outside the polygon" time="0.001">
    </testcase>
    <testcase classname="calculateFreehandStatistics.js should calculate that statistics of pixels within the polygon" name="calculateFreehandStatistics.js should calculate that statistics of pixels within the polygon" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CircleRoiTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:42" time="0.143" tests="14">
    <testcase classname="CircleRoiTool.js default values has a default name of &quot;CircleRoi&quot;" name="CircleRoiTool.js default values has a default name of &quot;CircleRoi&quot;" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js default values can be created with a custom tool name" name="CircleRoiTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js createNewMeasurement emits console error if required eventData is not provided" name="CircleRoiTool.js createNewMeasurement emits console error if required eventData is not provided" time="0.001">
    </testcase>
    <testcase classname="CircleRoiTool.js createNewMeasurement returns a tool measurement object" name="CircleRoiTool.js createNewMeasurement returns a tool measurement object" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" name="CircleRoiTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" time="0.001">
    </testcase>
    <testcase classname="CircleRoiTool.js createNewMeasurement returns a measurement with a initial rotation" name="CircleRoiTool.js createNewMeasurement returns a measurement with a initial rotation" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js createNewMeasurement returns a measurement with a textBox handle" name="CircleRoiTool.js createNewMeasurement returns a measurement with a textBox handle" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" name="CircleRoiTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" time="0.001">
    </testcase>
    <testcase classname="CircleRoiTool.js pointNearTool returns false when measurement data is null or undefined" name="CircleRoiTool.js pointNearTool returns false when measurement data is null or undefined" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js pointNearTool returns false when measurement data is not visible" name="CircleRoiTool.js pointNearTool returns false when measurement data is not visible" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js pointNearTool returns false when point is not in the hit area region" name="CircleRoiTool.js pointNearTool returns false when point is not in the hit area region" time="0.001">
    </testcase>
    <testcase classname="CircleRoiTool.js pointNearTool returns true when point is within hit area region" name="CircleRoiTool.js pointNearTool returns true when point is within hit area region" time="0">
    </testcase>
    <testcase classname="CircleRoiTool.js updateCachedStats should calculate and update annotation values" name="CircleRoiTool.js updateCachedStats should calculate and update annotation values" time="0.002">
    </testcase>
    <testcase classname="CircleRoiTool.js renderToolData returns undefined when no toolData exists for the tool" name="CircleRoiTool.js renderToolData returns undefined when no toolData exists for the tool" time="0">
    </testcase>
  </testsuite>
  <testsuite name="EllipticalRoiTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:43" time="0.129" tests="12">
    <testcase classname="EllipticalRoiTool.js default values has a default name of &quot;EllipticalRoi&quot;" name="EllipticalRoiTool.js default values has a default name of &quot;EllipticalRoi&quot;" time="0.001">
    </testcase>
    <testcase classname="EllipticalRoiTool.js default values can be created with a custom tool name" name="EllipticalRoiTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="EllipticalRoiTool.js createNewMeasurement emits console error if required eventData is not provided" name="EllipticalRoiTool.js createNewMeasurement emits console error if required eventData is not provided" time="0.001">
    </testcase>
    <testcase classname="EllipticalRoiTool.js createNewMeasurement returns a tool measurement object" name="EllipticalRoiTool.js createNewMeasurement returns a tool measurement object" time="0">
    </testcase>
    <testcase classname="EllipticalRoiTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" name="EllipticalRoiTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" time="0.001">
    </testcase>
    <testcase classname="EllipticalRoiTool.js createNewMeasurement returns a measurement with a initial rotation" name="EllipticalRoiTool.js createNewMeasurement returns a measurement with a initial rotation" time="0">
    </testcase>
    <testcase classname="EllipticalRoiTool.js createNewMeasurement returns a measurement with a textBox handle" name="EllipticalRoiTool.js createNewMeasurement returns a measurement with a textBox handle" time="0">
    </testcase>
    <testcase classname="EllipticalRoiTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" name="EllipticalRoiTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" time="0.001">
    </testcase>
    <testcase classname="EllipticalRoiTool.js pointNearTool returns false when measurement data is null or undefined" name="EllipticalRoiTool.js pointNearTool returns false when measurement data is null or undefined" time="0">
    </testcase>
    <testcase classname="EllipticalRoiTool.js pointNearTool returns false when measurement data is not visible" name="EllipticalRoiTool.js pointNearTool returns false when measurement data is not visible" time="0.001">
    </testcase>
    <testcase classname="EllipticalRoiTool.js updateCachedStats should calculate and update annotation values" name="EllipticalRoiTool.js updateCachedStats should calculate and update annotation values" time="0.001">
    </testcase>
    <testcase classname="EllipticalRoiTool.js renderToolData returns undefined when no toolData exists for the tool" name="EllipticalRoiTool.js renderToolData returns undefined when no toolData exists for the tool" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RectangleRoiTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:43" time="0.124" tests="12">
    <testcase classname="RectangleRoiTool.js default values has a default name of &quot;RectangleRoi&quot;" name="RectangleRoiTool.js default values has a default name of &quot;RectangleRoi&quot;" time="0.001">
    </testcase>
    <testcase classname="RectangleRoiTool.js default values can be created with a custom tool name" name="RectangleRoiTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="RectangleRoiTool.js createNewMeasurement emits console error if required eventData is not provided" name="RectangleRoiTool.js createNewMeasurement emits console error if required eventData is not provided" time="0.001">
    </testcase>
    <testcase classname="RectangleRoiTool.js createNewMeasurement returns a tool measurement object" name="RectangleRoiTool.js createNewMeasurement returns a tool measurement object" time="0">
    </testcase>
    <testcase classname="RectangleRoiTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" name="RectangleRoiTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" time="0.001">
    </testcase>
    <testcase classname="RectangleRoiTool.js createNewMeasurement returns a measurement with a initial rotation" name="RectangleRoiTool.js createNewMeasurement returns a measurement with a initial rotation" time="0">
    </testcase>
    <testcase classname="RectangleRoiTool.js createNewMeasurement returns a measurement with a textBox handle" name="RectangleRoiTool.js createNewMeasurement returns a measurement with a textBox handle" time="0">
    </testcase>
    <testcase classname="RectangleRoiTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" name="RectangleRoiTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" time="0.001">
    </testcase>
    <testcase classname="RectangleRoiTool.js pointNearTool returns false when measurement data is null or undefined" name="RectangleRoiTool.js pointNearTool returns false when measurement data is null or undefined" time="0">
    </testcase>
    <testcase classname="RectangleRoiTool.js pointNearTool returns false when measurement data is not visible" name="RectangleRoiTool.js pointNearTool returns false when measurement data is not visible" time="0.001">
    </testcase>
    <testcase classname="RectangleRoiTool.js updateCachedStats should calculate and update annotation values" name="RectangleRoiTool.js updateCachedStats should calculate and update annotation values" time="0.001">
    </testcase>
    <testcase classname="RectangleRoiTool.js renderToolData returns undefined when no toolData exists for the tool" name="RectangleRoiTool.js renderToolData returns undefined when no toolData exists for the tool" time="0">
    </testcase>
  </testsuite>
  <testsuite name="history.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:43" time="0.132" tests="6">
    <testcase classname="history.js pushState Should push the applied operation to the Labelmap3D&apos;s undo stack." name="history.js pushState Should push the applied operation to the Labelmap3D&apos;s undo stack." time="0.001">
    </testcase>
    <testcase classname="history.js pushState Should push a set of simulataneous operations to multiple frames to the Labelmap3D&apos;s undo stack as one entry." name="history.js pushState Should push a set of simulataneous operations to multiple frames to the Labelmap3D&apos;s undo stack as one entry." time="0">
    </testcase>
    <testcase classname="history.js pushState Should invalidate the Labelmap3D&apos;s redo stack when pushing new state." name="history.js pushState Should invalidate the Labelmap3D&apos;s redo stack when pushing new state." time="0.001">
    </testcase>
    <testcase classname="history.js undo Should undo an operation and have it pushed to the redo stack." name="history.js undo Should undo an operation and have it pushed to the redo stack." time="0.001">
    </testcase>
    <testcase classname="history.js undo Should perform 1000 random operations to the labelmap, undo all the operations and return to a blank canvas." name="history.js undo Should perform 1000 random operations to the labelmap, undo all the operations and return to a blank canvas." time="0.021">
    </testcase>
    <testcase classname="history.js redo Should undo an operation and redo it to get the same result." name="history.js redo Should undo an operation and redo it to get the same result." time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="setToolModeForElement" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:43" time="0.119" tests="17">
    <testcase classname="setToolModeForElement sets the tool.mode to enabled" name="setToolModeForElement sets the tool.mode to enabled" time="0.001">
    </testcase>
    <testcase classname="setToolModeForElement can set the buttonMask option" name="setToolModeForElement can set the buttonMask option" time="0.001">
    </testcase>
    <testcase classname="setToolModeForElement emits a status change event" name="setToolModeForElement emits a status change event" time="0.001">
    </testcase>
    <testcase classname="_mergeMouseButtonMask merges buttonMask option with existing array" name="_mergeMouseButtonMask merges buttonMask option with existing array" time="0">
    </testcase>
    <testcase classname="_mergeMouseButtonMask does not allow duplicate mouseButtonMasks" name="_mergeMouseButtonMask does not allow duplicate mouseButtonMasks" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [] } when options is undefined" name="_getNormalizedOptions returns { mouseButtonMask: [] } when options is undefined" time="0.001">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [] } when options is null" name="_getNormalizedOptions returns { mouseButtonMask: [] } when options is null" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [] } when options is 0" name="_getNormalizedOptions returns { mouseButtonMask: [] } when options is 0" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [num] } when options is a number &gt; 0" name="_getNormalizedOptions returns { mouseButtonMask: [num] } when options is a number &gt; 0" time="0.001">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [1,2,3] } when options is [1,2,3]" name="_getNormalizedOptions returns { mouseButtonMask: [1,2,3] } when options is [1,2,3]" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [] } when options is {}" name="_getNormalizedOptions returns { mouseButtonMask: [] } when options is {}" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [] } when options is { mouseButtonMask: undefined }" name="_getNormalizedOptions returns { mouseButtonMask: [] } when options is { mouseButtonMask: undefined }" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [] } when options is { mouseButtonMask: null }" name="_getNormalizedOptions returns { mouseButtonMask: [] } when options is { mouseButtonMask: null }" time="0.001">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [] } when options is { mouseButtonMask: 0 }" name="_getNormalizedOptions returns { mouseButtonMask: [] } when options is { mouseButtonMask: 0 }" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions returns { mouseButtonMask: [1,2,3] } when options is { mouseButtonMask: [1,2,3] }" name="_getNormalizedOptions returns { mouseButtonMask: [1,2,3] } when options is { mouseButtonMask: [1,2,3] }" time="0">
    </testcase>
    <testcase classname="_getNormalizedOptions filters out invalid mouseButtonMask options" name="_getNormalizedOptions filters out invalid mouseButtonMask options" time="0.001">
    </testcase>
    <testcase classname="_getNormalizedOptions does not modify any value other than mouseButtonMask" name="_getNormalizedOptions does not modify any value other than mouseButtonMask" time="0">
    </testcase>
  </testsuite>
  <testsuite name="LengthTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:43" time="0.162" tests="11">
    <testcase classname="LengthTool.js default values has a default name of &quot;Length&quot;" name="LengthTool.js default values has a default name of &quot;Length&quot;" time="0.008">
    </testcase>
    <testcase classname="LengthTool.js default values can be created with a custom tool name" name="LengthTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="LengthTool.js createNewMeasurement emits console error if required eventData is not provided" name="LengthTool.js createNewMeasurement emits console error if required eventData is not provided" time="0.001">
    </testcase>
    <testcase classname="LengthTool.js createNewMeasurement returns a tool measurement object" name="LengthTool.js createNewMeasurement returns a tool measurement object" time="0">
    </testcase>
    <testcase classname="LengthTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" name="LengthTool.js createNewMeasurement returns a measurement with a start and end handle at the eventData&apos;s x and y" time="0.001">
    </testcase>
    <testcase classname="LengthTool.js createNewMeasurement returns a measurement with a textBox handle" name="LengthTool.js createNewMeasurement returns a measurement with a textBox handle" time="0">
    </testcase>
    <testcase classname="LengthTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" name="LengthTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" time="0.001">
    </testcase>
    <testcase classname="LengthTool.js pointNearTool returns false when measurement data is null or undefined" name="LengthTool.js pointNearTool returns false when measurement data is null or undefined" time="0">
    </testcase>
    <testcase classname="LengthTool.js pointNearTool returns false when measurement data is not visible" name="LengthTool.js pointNearTool returns false when measurement data is not visible" time="0">
    </testcase>
    <testcase classname="LengthTool.js updateCachedStats should calculate and update annotation value" name="LengthTool.js updateCachedStats should calculate and update annotation value" time="0.001">
    </testcase>
    <testcase classname="LengthTool.js renderToolData returns undefined when no toolData exists for the tool" name="LengthTool.js renderToolData returns undefined when no toolData exists for the tool" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ProbeTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:43" time="0.127" tests="10">
    <testcase classname="ProbeTool.js default values has a default name of &quot;Probe&quot;" name="ProbeTool.js default values has a default name of &quot;Probe&quot;" time="0">
    </testcase>
    <testcase classname="ProbeTool.js default values can be created with a custom tool name" name="ProbeTool.js default values can be created with a custom tool name" time="0.001">
    </testcase>
    <testcase classname="ProbeTool.js createNewMeasurement emits console error if required eventData is not provided" name="ProbeTool.js createNewMeasurement emits console error if required eventData is not provided" time="0.001">
    </testcase>
    <testcase classname="ProbeTool.js createNewMeasurement returns a tool measurement object" name="ProbeTool.js createNewMeasurement returns a tool measurement object" time="0">
    </testcase>
    <testcase classname="ProbeTool.js createNewMeasurement returns a measurement with an end handle at the eventData&apos;s x and y and an undefined start" name="ProbeTool.js createNewMeasurement returns a measurement with an end handle at the eventData&apos;s x and y and an undefined start" time="0">
    </testcase>
    <testcase classname="ProbeTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" name="ProbeTool.js pointNearTool emits a console warning when measurementData without start/end handles are supplied" time="0.001">
    </testcase>
    <testcase classname="ProbeTool.js pointNearTool returns false when measurement data is null or undefined" name="ProbeTool.js pointNearTool returns false when measurement data is null or undefined" time="0">
    </testcase>
    <testcase classname="ProbeTool.js pointNearTool returns false when measurement data is not visible" name="ProbeTool.js pointNearTool returns false when measurement data is not visible" time="0">
    </testcase>
    <testcase classname="ProbeTool.js updateCachedStats should calculate and update annotation values" name="ProbeTool.js updateCachedStats should calculate and update annotation values" time="0.001">
    </testcase>
    <testcase classname="ProbeTool.js renderToolData returns undefined when no toolData exists for the tool" name="ProbeTool.js renderToolData returns undefined when no toolData exists for the tool" time="0">
    </testcase>
  </testsuite>
  <testsuite name="loadHandlerManager" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.116" tests="10">
    <testcase classname="loadHandlerManager should create multiples loadHandler for StartLoadHandler" name="loadHandlerManager should create multiples loadHandler for StartLoadHandler" time="0.001">
    </testcase>
    <testcase classname="loadHandlerManager should create multiples loadHandler for setEndLoadHandler" name="loadHandlerManager should create multiples loadHandler for setEndLoadHandler" time="0.001">
    </testcase>
    <testcase classname="loadHandlerManager should create multiples loadHandler for setErrorLoadingHandler" name="loadHandlerManager should create multiples loadHandler for setErrorLoadingHandler" time="0.001">
    </testcase>
    <testcase classname="loadHandlerManager should create a single loadHandler even though the element is undefined" name="loadHandlerManager should create a single loadHandler even though the element is undefined" time="0">
    </testcase>
    <testcase classname="loadHandlerManager should create a single loadHandler even though the element is not passed as parameter to the function" name="loadHandlerManager should create a single loadHandler even though the element is not passed as parameter to the function" time="0">
    </testcase>
    <testcase classname="loadHandlerManager should throw an error if handler function is not defined for setStartLoadHandler" name="loadHandlerManager should throw an error if handler function is not defined for setStartLoadHandler" time="0">
    </testcase>
    <testcase classname="loadHandlerManager should throw an error if handler function is not defined for setEndLoadHandler" name="loadHandlerManager should throw an error if handler function is not defined for setEndLoadHandler" time="0.001">
    </testcase>
    <testcase classname="loadHandlerManager should throw an error if handler function is not defined for setErrorLoadingHandler" name="loadHandlerManager should throw an error if handler function is not defined for setErrorLoadingHandler" time="0">
    </testcase>
    <testcase classname="loadHandlerManager should remove loadHandler for multiple handlers" name="loadHandlerManager should remove loadHandler for multiple handlers" time="0.001">
    </testcase>
    <testcase classname="loadHandlerManager should remove loadHandler a single handler" name="loadHandlerManager should remove loadHandler a single handler" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="movePerpendicularLine.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.086" tests="4">
    <testcase classname="movePerpendicularLine.js perpendicular line is moved and the opposite handle position is updated" name="movePerpendicularLine.js perpendicular line is moved and the opposite handle position is updated" time="0.002">
    </testcase>
    <testcase classname="movePerpendicularLine.js perpendicular line is moved and the opposite handle position stays the same" name="movePerpendicularLine.js perpendicular line is moved and the opposite handle position stays the same" time="0.001">
    </testcase>
    <testcase classname="movePerpendicularLine.js perpendicular line is not moved (proposed point is before intersection point)" name="movePerpendicularLine.js perpendicular line is not moved (proposed point is before intersection point)" time="0">
    </testcase>
    <testcase classname="movePerpendicularLine.js perpendicular line is not moved (long line has no length)" name="movePerpendicularLine.js perpendicular line is not moved (long line has no length)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ScaleOverlayTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.096" tests="9">
    <testcase classname="ScaleOverlayTool.js default values has a default name of &quot;ScaleOverlay&quot;" name="ScaleOverlayTool.js default values has a default name of &quot;ScaleOverlay&quot;" time="0.001">
    </testcase>
    <testcase classname="ScaleOverlayTool.js default values can be created with a custom tool name" name="ScaleOverlayTool.js default values can be created with a custom tool name" time="0.001">
    </testcase>
    <testcase classname="ScaleOverlayTool.js default values sets a default configuration with an minorTickLength as 12.5" name="ScaleOverlayTool.js default values sets a default configuration with an minorTickLength as 12.5" time="0">
    </testcase>
    <testcase classname="ScaleOverlayTool.js default values sets a default configuration with an majorTickLength as 25" name="ScaleOverlayTool.js default values sets a default configuration with an majorTickLength as 25" time="0">
    </testcase>
    <testcase classname="ScaleOverlayTool.js forceImageUpdate should call updateImage is image exists" name="ScaleOverlayTool.js forceImageUpdate should call updateImage is image exists" time="0.001">
    </testcase>
    <testcase classname="ScaleOverlayTool.js forceImageUpdate should NOT call updateImage is image does not exists" name="ScaleOverlayTool.js forceImageUpdate should NOT call updateImage is image does not exists" time="0">
    </testcase>
    <testcase classname="ScaleOverlayTool.js disabledCallback should call forceImageUpdate" name="ScaleOverlayTool.js disabledCallback should call forceImageUpdate" time="0">
    </testcase>
    <testcase classname="ScaleOverlayTool.js enabledCallback should call forceImageUpdate" name="ScaleOverlayTool.js enabledCallback should call forceImageUpdate" time="0">
    </testcase>
    <testcase classname="ScaleOverlayTool.js renderToolData should return if row/collum pixel spacing is undefined" name="ScaleOverlayTool.js renderToolData should return if row/collum pixel spacing is undefined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="BaseTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.091" tests="8">
    <testcase classname="BaseTool.js constructor() should be instantiated with default mode of &quot;disabled&quot;" name="BaseTool.js constructor() should be instantiated with default mode of &quot;disabled&quot;" time="0">
    </testcase>
    <testcase classname="BaseTool.js constructor() should have default configuration as an empty object" name="BaseTool.js constructor() should have default configuration as an empty object" time="0.001">
    </testcase>
    <testcase classname="BaseTool.js constructor() should be able to set configuration after instantiated" name="BaseTool.js constructor() should be able to set configuration after instantiated" time="0">
    </testcase>
    <testcase classname="BaseTool.js constructor() should be able to be instantiated with properties" name="BaseTool.js constructor() should be able to be instantiated with properties" time="0">
    </testcase>
    <testcase classname="BaseTool.js constructor() should be able to be instantiated and get default properties merged with custom properties" name="BaseTool.js constructor() should be able to be instantiated and get default properties merged with custom properties" time="0.001">
    </testcase>
    <testcase classname="BaseTool.js clearOptions() should clear BaseTool options" name="BaseTool.js clearOptions() should clear BaseTool options" time="0">
    </testcase>
    <testcase classname="BaseTool.js mergeOptions() should add options into BaseTool" name="BaseTool.js mergeOptions() should add options into BaseTool" time="0">
    </testcase>
    <testcase classname="BaseTool.js applyActiveStrategy() should call activeStrategy" name="BaseTool.js applyActiveStrategy() should call activeStrategy" time="0">
    </testcase>
  </testsuite>
  <testsuite name="toolOptions manipulation" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.189" tests="1">
    <testcase classname="toolOptions manipulation has expected effects" name="toolOptions manipulation has expected effects" time="0.115">
    </testcase>
  </testsuite>
  <testsuite name="eventListeners/wheelEventListener.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.071" tests="6">
    <testcase classname="eventListeners/wheelEventListener.js calling enable adds an event listener for native `wheel` event" name="eventListeners/wheelEventListener.js calling enable adds an event listener for native `wheel` event" time="0.001">
    </testcase>
    <testcase classname="eventListeners/wheelEventListener.js calling disable removes an event listener for native `wheel` event" name="eventListeners/wheelEventListener.js calling disable removes an event listener for native `wheel` event" time="0">
    </testcase>
    <testcase classname="eventListeners/wheelEventListener.js emits an `cornerstonetoolsmousewheel` event when enabled element is scrolled" name="eventListeners/wheelEventListener.js emits an `cornerstonetoolsmousewheel` event when enabled element is scrolled" time="0.002">
    </testcase>
    <testcase classname="eventListeners/wheelEventListener.js calling enable multiple times does not duplicate listener" name="eventListeners/wheelEventListener.js calling enable multiple times does not duplicate listener" time="0.001">
    </testcase>
    <testcase classname="eventListeners/wheelEventListener.js the `cornerstonetoolsmousewheel` event contains expected properties" name="eventListeners/wheelEventListener.js the `cornerstonetoolsmousewheel` event contains expected properties" time="0.001">
    </testcase>
    <testcase classname="eventListeners/wheelEventListener.js does not emit an `cornerstonetoolsmousewheel` event when scrolling less than one pixel" name="eventListeners/wheelEventListener.js does not emit an `cornerstonetoolsmousewheel` event when scrolling less than one pixel" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="eventDispatchers/customCallbackHandler.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.074" tests="7">
    <testcase classname="eventDispatchers/customCallbackHandler.js returns false when &quot;isToolLocked&quot; is true" name="eventDispatchers/customCallbackHandler.js returns false when &quot;isToolLocked&quot; is true" time="0">
    </testcase>
    <testcase classname="eventDispatchers/customCallbackHandler.js does not call a tool&apos;s customFunction when &quot;isToolLocked&quot; is true" name="eventDispatchers/customCallbackHandler.js does not call a tool&apos;s customFunction when &quot;isToolLocked&quot; is true" time="0.001">
    </testcase>
    <testcase classname="eventDispatchers/customCallbackHandler.js gets mouse tools when handlerType is &quot;Mouse&quot;" name="eventDispatchers/customCallbackHandler.js gets mouse tools when handlerType is &quot;Mouse&quot;" time="0">
    </testcase>
    <testcase classname="eventDispatchers/customCallbackHandler.js gets touch tools when handlerType is &quot;Touch&quot;" name="eventDispatchers/customCallbackHandler.js gets touch tools when handlerType is &quot;Touch&quot;" time="0">
    </testcase>
    <testcase classname="eventDispatchers/customCallbackHandler.js returns false when &quot;getActiveToolsForElements&quot; returns an empty array" name="eventDispatchers/customCallbackHandler.js returns false when &quot;getActiveToolsForElements&quot; returns an empty array" time="0.001">
    </testcase>
    <testcase classname="eventDispatchers/customCallbackHandler.js returns false when no tools have a function with the customFunction name" name="eventDispatchers/customCallbackHandler.js returns false when no tools have a function with the customFunction name" time="0">
    </testcase>
    <testcase classname="eventDispatchers/customCallbackHandler.js calls the customFunction on the first active tool that implements it" name="eventDispatchers/customCallbackHandler.js calls the customFunction on the first active tool that implements it" time="0">
    </testcase>
  </testsuite>
  <testsuite name="moveLongLine.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:44" time="0.073" tests="3">
    <testcase classname="moveLongLine.js long line is moved and perpendicular line position is updated" name="moveLongLine.js long line is moved and perpendicular line position is updated" time="0.002">
    </testcase>
    <testcase classname="moveLongLine.js long line is moved and perpendicular line position stays the same" name="moveLongLine.js long line is moved and perpendicular line position stays the same" time="0">
    </testcase>
    <testcase classname="moveLongLine.js long line is not moved (proposed point is before intersection point)" name="moveLongLine.js long line is not moved (proposed point is before intersection point)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CalculateLongestAndShortestDiameters.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.08" tests="5">
    <testcase classname="CalculateLongestAndShortestDiameters.js should calculates long/short diameters" name="CalculateLongestAndShortestDiameters.js should calculates long/short diameters" time="0.002">
    </testcase>
    <testcase classname="CalculateLongestAndShortestDiameters.js should return values with scale of 1" name="CalculateLongestAndShortestDiameters.js should return values with scale of 1" time="0">
    </testcase>
    <testcase classname="CalculateLongestAndShortestDiameters.js should use a default pixelSpacing of 1 when pixelSpacing is undefined" name="CalculateLongestAndShortestDiameters.js should use a default pixelSpacing of 1 when pixelSpacing is undefined" time="0.001">
    </testcase>
    <testcase classname="CalculateLongestAndShortestDiameters.js should get longest and shortest diameters defined even with undefined handles" name="CalculateLongestAndShortestDiameters.js should get longest and shortest diameters defined even with undefined handles" time="0">
    </testcase>
    <testcase classname="CalculateLongestAndShortestDiameters.js should make shortestDiameter always small than longestDiameter" name="CalculateLongestAndShortestDiameters.js should make shortestDiameter always small than longestDiameter" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="WwwcTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.089" tests="8">
    <testcase classname="WwwcTool.js default values has a default name of &quot;Wwwc&quot;" name="WwwcTool.js default values has a default name of &quot;Wwwc&quot;" time="0.001">
    </testcase>
    <testcase classname="WwwcTool.js default values can be created with a custom tool name" name="WwwcTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="WwwcTool.js default values sets a default configuration with an orientation of 0" name="WwwcTool.js default values sets a default configuration with an orientation of 0" time="0.001">
    </testcase>
    <testcase classname="WwwcTool.js default values uses &quot;basicLevelingStrategy&quot; as a default strategy" name="WwwcTool.js default values uses &quot;basicLevelingStrategy&quot; as a default strategy" time="0">
    </testcase>
    <testcase classname="WwwcTool.js mouseDragCallback applies the active strategy" name="WwwcTool.js mouseDragCallback applies the active strategy" time="0">
    </testcase>
    <testcase classname="WwwcTool.js mouseDragCallback updates the viewport" name="WwwcTool.js mouseDragCallback updates the viewport" time="0.001">
    </testcase>
    <testcase classname="WwwcTool.js touchDragCallback applies the active strategy" name="WwwcTool.js touchDragCallback applies the active strategy" time="0">
    </testcase>
    <testcase classname="WwwcTool.js touchDragCallback updates the viewport" name="WwwcTool.js touchDragCallback updates the viewport" time="0">
    </testcase>
  </testsuite>
  <testsuite name="PanTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.093" tests="6">
    <testcase classname="PanTool.js default values has a default name of &quot;Pan&quot;" name="PanTool.js default values has a default name of &quot;Pan&quot;" time="0.001">
    </testcase>
    <testcase classname="PanTool.js default values can be created with a custom tool name" name="PanTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="PanTool.js Interaction&apos;s behavior should update viewport once mouse drag event" name="PanTool.js Interaction&apos;s behavior should update viewport once mouse drag event" time="0">
    </testcase>
    <testcase classname="PanTool.js Interaction&apos;s behavior should update viewport once touch drag event" name="PanTool.js Interaction&apos;s behavior should update viewport once touch drag event" time="0.001">
    </testcase>
    <testcase classname="PanTool.js Interaction&apos;s behavior should set the viewport properly with mock data and column bigger than row pixel spacing" name="PanTool.js Interaction&apos;s behavior should set the viewport properly with mock data and column bigger than row pixel spacing" time="0">
    </testcase>
    <testcase classname="PanTool.js Interaction&apos;s behavior should set the viewport properly with mock data row bigger than column pixel spacing" name="PanTool.js Interaction&apos;s behavior should set the viewport properly with mock data row bigger than column pixel spacing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getBaseData.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.116" tests="2">
    <testcase classname="getBaseData.js returns a baseData object with the correct values" name="getBaseData.js returns a baseData object with the correct values" time="0.003">
    </testcase>
    <testcase classname="getBaseData.js ensure that baseData object is returned with default row and column pixel spacing" name="getBaseData.js ensure that baseData object is returned with default row and column pixel spacing" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="PanMultiTouchTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.098" tests="5">
    <testcase classname="PanMultiTouchTool.js default values has a default name of &quot;PanMultiTouch&quot;" name="PanMultiTouchTool.js default values has a default name of &quot;PanMultiTouch&quot;" time="0.001">
    </testcase>
    <testcase classname="PanMultiTouchTool.js default values can be created with a custom tool name" name="PanMultiTouchTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="PanMultiTouchTool.js Interaction&apos;s behavior should update viewport once mouse drag event" name="PanMultiTouchTool.js Interaction&apos;s behavior should update viewport once mouse drag event" time="0">
    </testcase>
    <testcase classname="PanMultiTouchTool.js Interaction&apos;s behavior should set the viewport properly with mock data and column bigger than row pixel spacing" name="PanMultiTouchTool.js Interaction&apos;s behavior should set the viewport properly with mock data and column bigger than row pixel spacing" time="0">
    </testcase>
    <testcase classname="PanMultiTouchTool.js Interaction&apos;s behavior should set the viewport properly with mock data row bigger than column pixel spacing" name="PanMultiTouchTool.js Interaction&apos;s behavior should set the viewport properly with mock data row bigger than column pixel spacing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="OrientationMarkersTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.085" tests="7">
    <testcase classname="OrientationMarkersTool.js default values has a default name of &quot;OrientationMarkers&quot;" name="OrientationMarkersTool.js default values has a default name of &quot;OrientationMarkers&quot;" time="0.001">
    </testcase>
    <testcase classname="OrientationMarkersTool.js default values can be created with a custom tool name" name="OrientationMarkersTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="OrientationMarkersTool.js default values sets a default configuration with a drawAllMarkers as true" name="OrientationMarkersTool.js default values sets a default configuration with a drawAllMarkers as true" time="0.001">
    </testcase>
    <testcase classname="OrientationMarkersTool.js forceImageUpdate should call updateImage if image exists" name="OrientationMarkersTool.js forceImageUpdate should call updateImage if image exists" time="0">
    </testcase>
    <testcase classname="OrientationMarkersTool.js forceImageUpdate should NOT call updateImage if image does not exists" name="OrientationMarkersTool.js forceImageUpdate should NOT call updateImage if image does not exists" time="0">
    </testcase>
    <testcase classname="OrientationMarkersTool.js disabledCallback should call forceImageUpdate" name="OrientationMarkersTool.js disabledCallback should call forceImageUpdate" time="0.001">
    </testcase>
    <testcase classname="OrientationMarkersTool.js enabledCallback should call forceImageUpdate" name="OrientationMarkersTool.js enabledCallback should call forceImageUpdate" time="0">
    </testcase>
  </testsuite>
  <testsuite name="eventDispatchers/touchToolEventDispatcher.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.064" tests="4">
    <testcase classname="eventDispatchers/touchToolEventDispatcher.js enable adds 10 event listeners to an element" name="eventDispatchers/touchToolEventDispatcher.js enable adds 10 event listeners to an element" time="0.001">
    </testcase>
    <testcase classname="eventDispatchers/touchToolEventDispatcher.js enable adds event listeners for all tap/touch events" name="eventDispatchers/touchToolEventDispatcher.js enable adds event listeners for all tap/touch events" time="0.001">
    </testcase>
    <testcase classname="eventDispatchers/touchToolEventDispatcher.js disable removes 10 event listeners to an element" name="eventDispatchers/touchToolEventDispatcher.js disable removes 10 event listeners to an element" time="0">
    </testcase>
    <testcase classname="eventDispatchers/touchToolEventDispatcher.js disable removes event listeners for all tap/touch events" name="eventDispatchers/touchToolEventDispatcher.js disable removes event listeners for all tap/touch events" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="updatePerpendicularLineHandles.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.064" tests="2">
    <testcase classname="updatePerpendicularLineHandles.js perpendicular line has half the size of the long line" name="updatePerpendicularLineHandles.js perpendicular line has half the size of the long line" time="0.002">
    </testcase>
    <testcase classname="updatePerpendicularLineHandles.js line is not updated because start point is not locked" name="updatePerpendicularLineHandles.js line is not updated because start point is not locked" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="eventDispatchers/mouseToolEventDispatcher.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:45" time="0.065" tests="4">
    <testcase classname="eventDispatchers/mouseToolEventDispatcher.js enable adds 7 event listeners to an element" name="eventDispatchers/mouseToolEventDispatcher.js enable adds 7 event listeners to an element" time="0.009">
    </testcase>
    <testcase classname="eventDispatchers/mouseToolEventDispatcher.js enable adds event listeners for all tap/touch events" name="eventDispatchers/mouseToolEventDispatcher.js enable adds event listeners for all tap/touch events" time="0">
    </testcase>
    <testcase classname="eventDispatchers/mouseToolEventDispatcher.js disable removes 6 event listeners to an element" name="eventDispatchers/mouseToolEventDispatcher.js disable removes 6 event listeners to an element" time="0.001">
    </testcase>
    <testcase classname="eventDispatchers/mouseToolEventDispatcher.js disable removes event listeners for all tap/touch events" name="eventDispatchers/mouseToolEventDispatcher.js disable removes event listeners for all tap/touch events" time="0">
    </testcase>
  </testsuite>
  <testsuite name="stackScrollMultiTouchTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.085" tests="6">
    <testcase classname="stackScrollMultiTouchTool.js default values has a default name of &quot;StackScrollMultiTouch&quot;" name="stackScrollMultiTouchTool.js default values has a default name of &quot;StackScrollMultiTouch&quot;" time="0.001">
    </testcase>
    <testcase classname="stackScrollMultiTouchTool.js default values can be created with a custom tool name" name="stackScrollMultiTouchTool.js default values can be created with a custom tool name" time="0.001">
    </testcase>
    <testcase classname="stackScrollMultiTouchTool.js default values should have default configuration loop as false" name="stackScrollMultiTouchTool.js default values should have default configuration loop as false" time="0">
    </testcase>
    <testcase classname="stackScrollMultiTouchTool.js default values should have default configuration allowSkipping as true" name="stackScrollMultiTouchTool.js default values should have default configuration allowSkipping as true" time="0">
    </testcase>
    <testcase classname="stackScrollMultiTouchTool.js _dragCallback should change image in case drag variation on Y is bigger than image pixels devided by images" name="stackScrollMultiTouchTool.js _dragCallback should change image in case drag variation on Y is bigger than image pixels devided by images" time="0.001">
    </testcase>
    <testcase classname="stackScrollMultiTouchTool.js _dragCallback should NOT change image in case drag variation on Y is smaller than image pixels devided by images" name="stackScrollMultiTouchTool.js _dragCallback should NOT change image in case drag variation on Y is smaller than image pixels devided by images" time="0">
    </testcase>
  </testsuite>
  <testsuite name="imageIdSpecificStateManager.add" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.064" tests="3">
    <testcase classname="imageIdSpecificStateManager.add creates the toolState and adds the data" name="imageIdSpecificStateManager.add creates the toolState and adds the data" time="0.001">
    </testcase>
    <testcase classname="imageIdSpecificStateManager.add adds data to the existing toolState" name="imageIdSpecificStateManager.add adds data to the existing toolState" time="0.001">
    </testcase>
    <testcase classname="imageIdSpecificStateManager.add when the image is not yet defined returns without adding the data" name="imageIdSpecificStateManager.add when the image is not yet defined returns without adding the data" time="0">
    </testcase>
  </testsuite>
  <testsuite name="DragProbeTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.09" tests="5">
    <testcase classname="DragProbeTool.js default values has a default name of &quot;DragProbe&quot;" name="DragProbeTool.js default values has a default name of &quot;DragProbe&quot;" time="0.001">
    </testcase>
    <testcase classname="DragProbeTool.js default values can be created with a custom tool name" name="DragProbeTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="DragProbeTool.js _movingEventCallback should set dragEventData and update image" name="DragProbeTool.js _movingEventCallback should set dragEventData and update image" time="0.001">
    </testcase>
    <testcase classname="DragProbeTool.js _endMovingEventCallback should set dragEventData and update image" name="DragProbeTool.js _endMovingEventCallback should set dragEventData and update image" time="0">
    </testcase>
    <testcase classname="DragProbeTool.js renderToolData should apply strategy if currentPoint are stored" name="DragProbeTool.js renderToolData should apply strategy if currentPoint are stored" time="0">
    </testcase>
  </testsuite>
  <testsuite name="StachScroll.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.084" tests="6">
    <testcase classname="StachScroll.js default values has a default name of &quot;StackScroll&quot;" name="StachScroll.js default values has a default name of &quot;StackScroll&quot;" time="0.001">
    </testcase>
    <testcase classname="StachScroll.js default values can be created with a custom tool name" name="StachScroll.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="StachScroll.js default values should have default configuration loop as false" name="StachScroll.js default values should have default configuration loop as false" time="0.001">
    </testcase>
    <testcase classname="StachScroll.js default values should have default configuration allowSkipping as true" name="StachScroll.js default values should have default configuration allowSkipping as true" time="0">
    </testcase>
    <testcase classname="StachScroll.js _dragCallback should change image in case drag variation on Y is bigger than image pixels devided by images" name="StachScroll.js _dragCallback should change image in case drag variation on Y is bigger than image pixels devided by images" time="0">
    </testcase>
    <testcase classname="StachScroll.js _dragCallback should NOT change image in case drag variation on Y is smaller than image pixels devided by images" name="StachScroll.js _dragCallback should NOT change image in case drag variation on Y is smaller than image pixels devided by images" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="updatePerpendicularLine.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.088" tests="1">
    <testcase classname="updatePerpendicularLine.js line has points in expected position" name="updatePerpendicularLine.js line has points in expected position" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="getLabelmapsStats.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.083" tests="1">
    <testcase classname="getLabelmapsStats.js _calculateLabelmapStats Should calculate the volume weighted statistics correctly with different slice thickness." name="getLabelmapsStats.js _calculateLabelmapStats Should calculate the volume weighted statistics correctly with different slice thickness." time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="util/deepmerge.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.061" tests="5">
    <testcase classname="util/deepmerge.js should merge simple objects" name="util/deepmerge.js should merge simple objects" time="0">
    </testcase>
    <testcase classname="util/deepmerge.js should merge objects with more levels" name="util/deepmerge.js should merge objects with more levels" time="0">
    </testcase>
    <testcase classname="util/deepmerge.js should merge simple array" name="util/deepmerge.js should merge simple array" time="0">
    </testcase>
    <testcase classname="util/deepmerge.js should merge objects containing array" name="util/deepmerge.js should merge objects containing array" time="0.001">
    </testcase>
    <testcase classname="util/deepmerge.js should merge objects containing array with objects" name="util/deepmerge.js should merge objects containing array with objects" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getHelperLine.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.07" tests="2">
    <testcase classname="getHelperLine.js helper line for fixed start point" name="getHelperLine.js helper line for fixed start point" time="0.002">
    </testcase>
    <testcase classname="getHelperLine.js helper line for fixed end point" name="getHelperLine.js helper line for fixed end point" time="0">
    </testcase>
  </testsuite>
  <testsuite name="util/copyPoints.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.068" tests="5">
    <testcase classname="util/copyPoints.js should not return the same object as a copy" name="util/copyPoints.js should not return the same object as a copy" time="0.001">
    </testcase>
    <testcase classname="util/copyPoints.js should return an object containing a copy of `page` point" name="util/copyPoints.js should return an object containing a copy of `page` point" time="0.001">
    </testcase>
    <testcase classname="util/copyPoints.js should return an object containing a copy of `image` point" name="util/copyPoints.js should return an object containing a copy of `image` point" time="0.001">
    </testcase>
    <testcase classname="util/copyPoints.js should return an object containing a copy of `client` point" name="util/copyPoints.js should return an object containing a copy of `client` point" time="0">
    </testcase>
    <testcase classname="util/copyPoints.js should return an object containing a copy of `canvas` point" name="util/copyPoints.js should return an object containing a copy of `canvas` point" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="calculateEllipseStatistics.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:46" time="0.064" tests="2">
    <testcase classname="calculateEllipseStatistics.js result contains expected object properties" name="calculateEllipseStatistics.js result contains expected object properties" time="0.001">
    </testcase>
    <testcase classname="calculateEllipseStatistics.js only uses pixel values inside ellipse in calculation" name="calculateEllipseStatistics.js only uses pixel values inside ellipse in calculation" time="0">
    </testcase>
  </testsuite>
  <testsuite name="StachScrollMouseWheelTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.082" tests="5">
    <testcase classname="StachScrollMouseWheelTool.js default values has a default name of &quot;StackScrollMouseWheel&quot;" name="StachScrollMouseWheelTool.js default values has a default name of &quot;StackScrollMouseWheel&quot;" time="0.001">
    </testcase>
    <testcase classname="StachScrollMouseWheelTool.js default values can be created with a custom tool name" name="StachScrollMouseWheelTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="StachScrollMouseWheelTool.js default values should have default configuration loop as false" name="StachScrollMouseWheelTool.js default values should have default configuration loop as false" time="0.001">
    </testcase>
    <testcase classname="StachScrollMouseWheelTool.js default values should have default configuration allowSkipping as true" name="StachScrollMouseWheelTool.js default values should have default configuration allowSkipping as true" time="0">
    </testcase>
    <testcase classname="StachScrollMouseWheelTool.js mouseWheelCallback should call scroll function" name="StachScrollMouseWheelTool.js mouseWheelCallback should call scroll function" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getLineVector.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.102" tests="3">
    <testcase classname="getLineVector.js line vector for positive line" name="getLineVector.js line vector for positive line" time="0.001">
    </testcase>
    <testcase classname="getLineVector.js line vector for negative line" name="getLineVector.js line vector for negative line" time="0.001">
    </testcase>
    <testcase classname="getLineVector.js line vector for line with same point coordinates" name="getLineVector.js line vector for line with same point coordinates" time="0">
    </testcase>
  </testsuite>
  <testsuite name="calculateSUV.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.072" tests="2">
    <testcase classname="calculateSUV.js calculates SUV by scaling the pixel value by default" name="calculateSUV.js calculates SUV by scaling the pixel value by default" time="0.001">
    </testcase>
    <testcase classname="calculateSUV.js does not rescale the pixel value when skipRescale is true" name="calculateSUV.js does not rescale the pixel value when skipRescale is true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="drawing/setShadow.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.061" tests="4">
    <testcase classname="drawing/setShadow.js does not set context&apos;s shadow options if options are undefined" name="drawing/setShadow.js does not set context&apos;s shadow options if options are undefined" time="0.001">
    </testcase>
    <testcase classname="drawing/setShadow.js does not set context&apos;s shadow options if options.shadow is false" name="drawing/setShadow.js does not set context&apos;s shadow options if options.shadow is false" time="0">
    </testcase>
    <testcase classname="drawing/setShadow.js sets default shadow values when options.shadow is true, but no other shadow options are provided" name="drawing/setShadow.js sets default shadow values when options.shadow is true, but no other shadow options are provided" time="0.001">
    </testcase>
    <testcase classname="drawing/setShadow.js sets passed in shadow options for the provided context" name="drawing/setShadow.js sets passed in shadow options for the provided context" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RotateTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.081" tests="4">
    <testcase classname="RotateTool.js default values has a default name of &quot;Rotate&quot;" name="RotateTool.js default values has a default name of &quot;Rotate&quot;" time="0">
    </testcase>
    <testcase classname="RotateTool.js default values can be created with a custom tool name" name="RotateTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="RotateTool.js postMouseDownCallback should set initialRotation once mouse is click" name="RotateTool.js postMouseDownCallback should set initialRotation once mouse is click" time="0">
    </testcase>
    <testcase classname="RotateTool.js dragCallback should call setViewport once drag event is done" name="RotateTool.js dragCallback should call setViewport once drag event is done" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="clearRequestStack with an invalid type" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.066" tests="2">
    <testcase classname="clearRequestStack with an invalid type should throw an error when attempting to clear the request stack with an invalid type" name="clearRequestStack with an invalid type should throw an error when attempting to clear the request stack with an invalid type" time="0.008">
    </testcase>
    <testcase classname="addRequest should add the requests to the interaction stack, in the correct order" name="addRequest should add the requests to the interaction stack, in the correct order" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getDistanceWithPixelSpacing.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.056" tests="3">
    <testcase classname="getDistanceWithPixelSpacing.js distance for positive line" name="getDistanceWithPixelSpacing.js distance for positive line" time="0.001">
    </testcase>
    <testcase classname="getDistanceWithPixelSpacing.js distance for negative line" name="getDistanceWithPixelSpacing.js distance for negative line" time="0">
    </testcase>
    <testcase classname="getDistanceWithPixelSpacing.js distance for line with no length" name="getDistanceWithPixelSpacing.js distance for line with no length" time="0">
    </testcase>
  </testsuite>
  <testsuite name="tools/ZoomMouseWheelTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.079" tests="2">
    <testcase classname="tools/ZoomMouseWheelTool.js mouseWheelCallback has a mouseWheelCallback" name="tools/ZoomMouseWheelTool.js mouseWheelCallback has a mouseWheelCallback" time="0.001">
    </testcase>
    <testcase classname="tools/ZoomMouseWheelTool.js mouseWheelCallback sets an updated viewport" name="tools/ZoomMouseWheelTool.js mouseWheelCallback sets an updated viewport" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RotateTouchTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.079" tests="3">
    <testcase classname="RotateTouchTool.js default values has a default name of &quot;RotateTouch&quot;" name="RotateTouchTool.js default values has a default name of &quot;RotateTouch&quot;" time="0.002">
    </testcase>
    <testcase classname="RotateTouchTool.js default values can be created with a custom tool name" name="RotateTouchTool.js default values can be created with a custom tool name" time="0">
    </testcase>
    <testcase classname="RotateTouchTool.js touchRotateCallback should call setViewport with the correct rotation set by touch event" name="RotateTouchTool.js touchRotateCallback should call setViewport with the correct rotation set by touch event" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="lineHasLength.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.054" tests="3">
    <testcase classname="lineHasLength.js positive line has length" name="lineHasLength.js positive line has length" time="0.001">
    </testcase>
    <testcase classname="lineHasLength.js negative line has length" name="lineHasLength.js negative line has length" time="0">
    </testcase>
    <testcase classname="lineHasLength.js line with same points coordinates has not length" name="lineHasLength.js line with same points coordinates has not length" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DoubleTapFitToWindowTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:47" time="0.084" tests="3">
    <testcase classname="DoubleTapFitToWindowTool.js default values has a default name of &quot;DoubleTapFitToWindow&quot;" name="DoubleTapFitToWindowTool.js default values has a default name of &quot;DoubleTapFitToWindow&quot;" time="0">
    </testcase>
    <testcase classname="DoubleTapFitToWindowTool.js default values can be created with a custom tool name" name="DoubleTapFitToWindowTool.js default values can be created with a custom tool name" time="0.001">
    </testcase>
    <testcase classname="DoubleTapFitToWindowTool.js doubleTapCallback should fitToWindow once double tap event happens" name="DoubleTapFitToWindowTool.js doubleTapCallback should fitToWindow once double tap event happens" time="0">
    </testcase>
  </testsuite>
  <testsuite name="WwwcRegionTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.081" tests="4">
    <testcase classname="WwwcRegionTool.js default values has a default name of &quot;WwwcRegion&quot;" name="WwwcRegionTool.js default values has a default name of &quot;WwwcRegion&quot;" time="0.001">
    </testcase>
    <testcase classname="WwwcRegionTool.js default values can be created with a custom tool name" name="WwwcRegionTool.js default values can be created with a custom tool name" time="0.001">
    </testcase>
    <testcase classname="WwwcRegionTool.js default values sets a default configuration with an minWindowWidth of 10" name="WwwcRegionTool.js default values sets a default configuration with an minWindowWidth of 10" time="0">
    </testcase>
    <testcase classname="WwwcRegionTool.js default values sets a default handles with and empty object for each start and end" name="WwwcRegionTool.js default values sets a default handles with and empty object for each start and end" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="updatePerpendicularLine.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.059" tests="1">
    <testcase classname="updatePerpendicularLine.js line has points in expected position" name="updatePerpendicularLine.js line has points in expected position" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getMovingPoint.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.062" tests="2">
    <testcase classname="getMovingPoint.js moving point is end point" name="getMovingPoint.js moving point is end point" time="0">
    </testcase>
    <testcase classname="getMovingPoint.js moving point is start point" name="getMovingPoint.js moving point is start point" time="0">
    </testcase>
  </testsuite>
  <testsuite name="util: getDefault.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.057" tests="3">
    <testcase classname="util: getDefault.js returns the provided value instead of the default" name="util: getDefault.js returns the provided value instead of the default" time="0.001">
    </testcase>
    <testcase classname="util: getDefault.js returns a falsey value instead of the default when a falsey value is provided" name="util: getDefault.js returns a falsey value instead of the default when a falsey value is provided" time="0.001">
    </testcase>
    <testcase classname="util: getDefault.js returns the default value when the provided value is undefined" name="util: getDefault.js returns the default value when the provided value is undefined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getPixelPathBetweenPixels.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.049" tests="1">
    <testcase classname="getPixelPathBetweenPixels.js getPixelPathBetweenPixels should generate a path of 39 points between (0,0) and (40,25)" name="getPixelPathBetweenPixels.js getPixelPathBetweenPixels should generate a path of 39 points between (0,0) and (40,25)" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getCircle.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.064" tests="2">
    <testcase classname="getCircle.js returns an empty array when there are no rows or columns" name="getCircle.js returns an empty array when there are no rows or columns" time="0.001">
    </testcase>
    <testcase classname="getCircle.js returns an array of all points when brush covers entire area" name="getCircle.js returns an array of all points when brush covers entire area" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isPerpendicularEndFixed.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.061" tests="2">
    <testcase classname="isPerpendicularEndFixed.js perpendicular end point is the fixed point" name="isPerpendicularEndFixed.js perpendicular end point is the fixed point" time="0.001">
    </testcase>
    <testcase classname="isPerpendicularEndFixed.js perpendicular end point is not the fixed point" name="isPerpendicularEndFixed.js perpendicular end point is not the fixed point" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getDirectionMultiplier.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.057" tests="2">
    <testcase classname="getDirectionMultiplier.js has positive direction multiplier" name="getDirectionMultiplier.js has positive direction multiplier" time="0">
    </testcase>
    <testcase classname="getDirectionMultiplier.js has negative direction multiplier" name="getDirectionMultiplier.js has negative direction multiplier" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RectangleScissorsTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.083" tests="2">
    <testcase classname="RectangleScissorsTool.js Initialization Instantiate RectangleScissorsTool Correctly" name="RectangleScissorsTool.js Initialization Instantiate RectangleScissorsTool Correctly" time="0.001">
    </testcase>
    <testcase classname="RectangleScissorsTool.js Initialization allows a custom name" name="RectangleScissorsTool.js Initialization allows a custom name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CorrectionScissorsTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:48" time="0.109" tests="2">
    <testcase classname="CorrectionScissorsTool.js Initialization Instantiate CorrectionScissorsTool Correctly" name="CorrectionScissorsTool.js Initialization Instantiate CorrectionScissorsTool Correctly" time="0.001">
    </testcase>
    <testcase classname="CorrectionScissorsTool.js Initialization allows a custom name" name="CorrectionScissorsTool.js Initialization allows a custom name" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FreehandScissorsTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:49" time="0.089" tests="2">
    <testcase classname="FreehandScissorsTool.js Initialization Instantiate FreehandScissorsTool Correctly" name="FreehandScissorsTool.js Initialization Instantiate FreehandScissorsTool Correctly" time="0.002">
    </testcase>
    <testcase classname="FreehandScissorsTool.js Initialization allows a custom name" name="FreehandScissorsTool.js Initialization allows a custom name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CircleScissorsTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:49" time="0.069" tests="2">
    <testcase classname="CircleScissorsTool.js Initialization Instantiate CircleScissorsTool Correctly" name="CircleScissorsTool.js Initialization Instantiate CircleScissorsTool Correctly" time="0.001">
    </testcase>
    <testcase classname="CircleScissorsTool.js Initialization allows a custom name" name="CircleScissorsTool.js Initialization allows a custom name" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CrosshairsTool.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:49" time="0.073" tests="2">
    <testcase classname="CrosshairsTool.js default values has a default name of &quot;Crosshairs&quot;" name="CrosshairsTool.js default values has a default name of &quot;Crosshairs&quot;" time="0.001">
    </testcase>
    <testcase classname="CrosshairsTool.js default values can be created with a custom tool name" name="CrosshairsTool.js default values can be created with a custom tool name" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ult/logger.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:49" time="0.048" tests="2">
    <testcase classname="ult/logger.js getLogger creates a logger within the cornerstoneTools namespace" name="ult/logger.js getLogger creates a logger within the cornerstoneTools namespace" time="0.001">
    </testcase>
    <testcase classname="ult/logger.js getLogger emits an error" name="ult/logger.js getLogger emits an error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="internals/normalizeWheel.js" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:49" time="0.056" tests="1">
    <testcase classname="internals/normalizeWheel.js returns { spinX, spinY, pixelX, pixelY }" name="internals/normalizeWheel.js returns { spinX, spinY, pixelX, pixelY }" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2020-03-09T13:51:49" time="0.051" tests="1">
    <testcase classname=" adds 1 + 2 to equal 3" name=" adds 1 + 2 to equal 3" time="0.001">
    </testcase>
  </testsuite>
</testsuites>